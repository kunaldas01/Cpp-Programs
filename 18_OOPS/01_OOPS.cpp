#include <iostream>
#include <string>
using namespace std;

class Student
{
public:
    // Properties
    string name;
    int age;
    bool gender;
    static int time;

    void printInfo()
    {
        cout << "Name: " << name << endl;
        cout << "Age: " << age << endl;
        cout << "Gender: " << gender << endl;
    }

    // Getter and Setter
    void setName(string s)
    {
        name = s;
    }
    string getName()
    {
        return name;
    }

    // Non-Parameterized Constructors
    Student()
    {
        cout << "Constructor" << endl;
    }

    // Parameterized Constructor
    Student(string name, int age, bool gender)
    {
        this->name = name;
        this->age = age;
        this->gender = gender;
    }

    // Copy Constructor
    // Copy Constructor is also generated by default
    Student(Student &s)
    {
        this->name = s.name;
        this->age = s.age;
        this->gender = s.gender;
    }

    // Destructor
    ~Student()
    {
        cout << "Destructor Called" << endl;
    }

    // Static Functions
    static int random()
    {
        return time; // Static Functions can access only static members
    }

    // Operator Overloading
    bool operator==(Student &s)
    {
        if (name == s.name && age == s.age && gender == s.gender)
        {
            return true;
        }
        return false;
    }
};

// Static Keyword
int Student::time = 5; // Scope Resolution Operator

int main()
{
    // Static Keyword
    cout << Student::time << endl;

    cout << Student::random() << endl;

    Student s;

    cout << sizeof(s) << endl;
    // In case of Empty Class size is 1byte in order to identify/keep track of it

    // Assign and Output
    s.name = "Shradha";
    s.age = 20;
    s.gender = 0;
    // cout << s1.name << endl;
    // cout << s1.age << endl;
    // cout << s1.gender << endl;

    // Dynamic Allocation
    Student *p = new Student;
    // (*p).name="Kunal";
    p->name = "Kunal";
    // For Dynamically Allocated Objects Destructor should be called manually
    delete p;

    Student s2("Ajay", 24, 1); // Parameterized Constructor

    Student s3(s); // Copy Constructor
    // Student s3 = s;
    cout << s3.name << endl;

    // Array of Objects
    // Student a[3];
    // for (int i = 0; i < 3; i++)
    // {
    //     cout << "Enter Name: ";
    //     cin >> a[i].name;
    //     cout << "Enter Age: ";
    //     cin >> a[i].age;
    //     cout << "Enter Gender: ";
    //     cin >> a[i].gender;
    // }

    // for (int i = 0; i < 3; i++)
    // {
    //     a[i].printInfo();
    // }

    // Getters and Setters
    Student x;
    x.setName("Shradha");
    cout << x.getName() << endl;

    // // Operator Overloading
    // if (s3 == s4)
    // {
    //     cout << "Same" << endl;
    // }
    // else
    // {
    //     cout << "Not Same" << endl;
    // }

    // Student a;
    // cout << a.area(5) << endl;
    // cout << a.area(4, 7) << endl;
    return 0;
}